GIT笔记


----------------------------------------------------------------

# 清理未跟踪的文件和文件夹
$ git clean -fdx [path]

----------------------------------------------------------------

git log

# 查看某个文件的最近2次提交
$ git log -n2 fileName

# 显示最近1次提交的内容差异
$ git log -p -1

# 显示单行简短日志
$ git log --oneline # 同--pretty=oneline

# 使用限制符-S后面紧跟要查询的字符串
$ git log -Smethod_name

# 查看某次提交的修改内容
$ git show <commit-hash-id>

# 查看20161101号到07号，PC的提交记录
$ git log --pretty="%h - %s" --author=PC --since="2016-11-01" --before="2017-01-27"

# 显示在dev分支但是不在master分支中的提交
# --name-status会显示文件名和路径
$ git log --name-status dev ^master
$ git log --name-status master..dev

# Shows all commits that are in any of local branches but not in any of
# remote-tracking branches for origin (what you have that origin doesn't).
$ git log --branches --not --remotes=origin

# 查看master分支未推到远程master的提交
$ git log master --not --remotes=*/master
$ git log master ^origin/master
$ git log master origin/master..
$ git log origin/master..HEAD
$ git cherry -v

# 可以通过`git log`命令查看各个分支所指向的对象
$ git log --oneline --decorate

# 如果你想查看图形式的分叉历史,可以这样:
$ git log --oneline --decorate --graph --all

----------------------------------------------------------------

# 查看远程仓库地址
$ git remote -v
origin  https://github.com/lonetmoon/hello-world.git (fetch)
origin  https://github.com/lonetmoon/hello-world.git (push)

----------------------------------------------------------------

git diff

# 查看工作区中的修改
$ git diff

# 查看暂存区中的修改（将要提交的修改）
$ git diff --staged
$ git diff --cached

# 检查修改是否引入了空白字符
$ git diff --check

# --name-only 只显示文件名
git diff --name-only HEAD~ HEAD
git diff --name-only <commit-1> <commit-2>

$ git diff topic master    (1)
$ git diff topic..master   (2)
$ git diff topic...master  (3)
1.Changes between the tips of the topic and the master branches.
2.Same as above.
3.Changes that occurred on the master branch since when the topic branch was started off it.

----------------------------------------------------------------

撤销对文件的修改（丢弃工作区中的修改）
（use "git checkout -- <file>..." to discard changes in working directory）

$ git checkout -- file
$ git checkout [file]  # 这个同上

# 放弃当前目录所有修改，从HEAD中检出并且把它恢复
$ git checkout .

# 取其他提交中的文件
$ git checkout master~2 file

# 取某个提交中的指定文件
$ git checkout [commit] [file]

----------------------------------------------------------------

取消暂存的文件
使用 git add 将文件添加到了暂存区后可以
使用 git reset 将其移出到工作区中，修改内容不会丢失
（use "git reset HEAD <file>..." to unstage）
# git reset <paths> is the opposite of git add< paths>.
$ git reset HEAD file  # 实际去掉HEAD也一样
$ git reset -- file    # 同上，--表示没有选项

----------------------------------------------------------------

git commit

$ git commit -m "修改内容"

# 重新修改上次提交（新添加一修改文件）
$ git add project.property
$ git commit --amend -m "修改内容"

# 直接提交file，不经过git add
$ git commit file -m "修改内容"

----------------------------------------------------------------

撤销提交的修改

# 取消上次的提交，提交的修改还在
$ git reset HEAD^
$ git reset HEAD~1 # 同上

# 取消前两次的提交，提交的修改还在
$ git reset HEAD~2

# 取消上次的提交，用 --hard 丢弃提交的修改
$ git reset --hard HEAD^

----------------------------------------------------------------

# 上面丢弃上次的提交后，可以用下面方法再找回来
$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file
$ git reset --hard 3628164

----------------------------------------------------------------

# git reset 操作结果无法推到远程库，可以用如下命令
$ git revert <commit_id>

# 还原倒数第5次到倒数第3次的commit，且不做commit，只改变本地代码和index
$ git revert -n master~5..master~2

----------------------------------------------------------------

--mixed是reset的默认参数，它将重置HEAD到另外一个commit，并且重置index以便和HEAD相匹配，
这意味着working copy不会被更改，
所有的在original HEAD和你重置到的那个commit之间的所有变更将作为local modifications or untracked保存在working area中

--soft参数告诉git重置HEAD到另外一个commit，但到此为止。
这意味着index,working copy都不会做任何变化，
所有的在original HEAD和你重置到的那个commit之间的所有变更都放在stage(index)区域中。

--hard参数将会blow out everything。它将重置HEAD返回到另外一个commit，重置index HEAD working copy。

$ git reset --mixed HEAD   # 将改动从暂存区中移除，但是改动还留在工作区中。
$ git reset --mixed <commit_id>
$ git reset --hard HEAD    # 完全丢弃未提交的改动。

$ git reset --hard origin/master       	 # 把HEAD指向最新下载的版本
$ git reset --hard remotes/origin/master # 应该和上面命令一样

# git pull 后发现有问题，取消 pull
$ git reset --hard ORIG_HEAD  # 回到上次状态，但会丢弃本地修改
$ git reset --merge ORIG_HEAD # 回到上次状态，不会丢弃本地修改

----------------------------------------------------------------






----------------------------------------------------------------
----------------------------------------------------------------

# 上传代码到 github
echo "# zzzz" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/username/repository.git
git push -u origin master

----------------------------------------------------------------

用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

Git可视化工具，Git Extensions、 TortoiseGit、SourceTree、GitGUI等等，还有自带的gitk。
----------------------------------------------------------------

# 查看哪些文件在版本控制中
$ git ls-files

git-tag

git-diff-files

--dry-run
Show what would be done, without making any changes.

-n或--no-tags 不下载tag
----------------------------------------------------------------

$ git status

----------------------------------------------------------------

git apply

# --check只检查而不应用patch；--reject禁用原子操作，即应用可应用的patch hunk，拒绝的hunk保存在*.rej文件
$ git apply [--check] [--reject] [<patch>…?]

----------------------------------------------------------------

分支切换（所谓的分支切换就是HEAD指针的指向的改变）

$ git branch dev                 # 创建了一个名为dev 的新分支，但是没有切换到dev分支
$ git checkout dev               # 切换到dev分支
$ git checkout -b dev            # 创建并且换到新分支

# 创建一个跟踪分支（也叫“上游分支”），是与远程分支有直接关系的本地分支，
# 如果在一个跟踪分支上执行git pull，git 能自动地识别去哪个服务器上抓取、合并到哪个分支。
$ git checkout -b [branch] [remotename]/[branch]
$ git checkout -b dev origin/dev
$ git checkout -b dev -t origin/dev

$ git checkout -m dev            # 切换到dev分支，且合并当前的修改到dev

----------------------------------------------------------------

分支操作

条主要分支Master和Develop。前者用于正式发布，后者用于日常开发。
还可有功能（feature）分支，预发布（release）分支，修补bug（fixbug）分支。

$ git branch     # 查看本地分支信息（前带*的表示当前检出的分支）
$ git branch -vv # 查看本地分支信息

$ git branch -r  # 查看远程分支
$ git branch -a  # 查看所有分支

# 修改分支名，-M是指强制
$ git branch (-m | -M) [<oldbranch>] <newbranch>

# 删除dev分支，如果dev分支还有未合并到上游分支的内容则要用-D强制删除分支
$ git branch -d dev

# --merged 查看哪些分支已经合并到当前分支
$ git branch --merged        # 一般这个列表展示的除了*号的其他分支，都可以删除
$ git branch --no-merged     # 查看所有包含未合并工作的分支

# 设置HEAD指向的分支的上游为远程dev分支
$ git branch -u origin/dev     # -u同--set-upstream-to
$ git branch --unset-upstream  # 取消当前分支的跟踪分支

----------------------------------------------------------------

# 合并其他分支的一个修改
$ git cherry-pick <commit-id>

# 整个工程PUSH到远程一个新分支
$ git push origin HEAD:refs/heads/Test_Branch

# 提交步骤
$ git add
# git add --all # 把所有修改存入暂存区，准备生成一个提交
$ git commit -m "comment"
$ git push origin HEAD:refs/for/branch_name

--------------------------------------------------------------


----------------------------------------------------------------

$ git rm file

# 如果文件修改,并添加了暂存区, 需要使用-f参数来强制删除(force)
$ git rm -f file

# 可以使用glob模式,如下
$ git rm log/*.log         # 删除log目录下所有名称是.log结尾文件
$ git rm *~                # 删除以~结尾的所有文件

----------------------------------------------------------------

# 打包并压缩
$ git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip >git-1.4.0.tar.gz

----------------------------------------------------------------

# fetch 不会合并更新到当前分支，后续还要 merge
$ git fetch origin
$ git fetch origin master # 只fetch master分支
$ git merge origin/master

$ git pull origin master

# 在当前分支上合并远程 master 分支
$ git merge origin/master # 或者 git rebase origin/master

----------------------------------------------------------------

merge会自动提交，当前工作区最好不要有未提交的修改
$ git merge -m <msg> <commit>.... # 用msg代替自动merge说明
$ git merge --no-commit dev # merge dev分支到当前分支但是不自动提交
$ git merge --abort         # is equivalent to git reset --merge when MERGE_HEAD is present.

--------------------------------------------------------------

创建特性分支
merge时使用--no-ff参数禁用fast-forward合并，
这样会在develop分支上生成一个新节点，保证版本演进的清晰。

$ git checkout -b myfeature develop
Switched to a new branch "myfeature"

# 添加功能代码

$ git checkout develop
Switched to branch 'develop'

$ git merge --no-ff myfeature
Updating ea1b82a..05e9557
(Summary of changes)

$ git branch -d myfeature
Deleted branch myfeature

$ git push origin develop # 如果develop分支不存在，则会被新建。

----------------------------------------------------------------

stash 将工作区与暂存区中的内容做一个提交，保存起来，
然后使用 reset Hard 选项恢复工作区与暂存区内容。
我们可以随时使用 stash apply 将修改应用回来。
stash 实现思路将我们的修改提交到本地仓库，
使用特殊的分支指针（.git/refs/stash）引用该提交，
然后在恢复的时候，将该提交恢复即可。

git stash list [<options>]            # 列出stash（带<message>）
git stash show [<stash>]              # 列出最新的一个stash
git stash show -p [<stash>]           # 列出最新的一个stash（还详细修改内容）
git stash drop [-q|--quiet] [<stash>]            # 删除一个stash，默认为stash@{0}
git stash pop [--index] [-q|--quiet] [<stash>]   # 还原代码并且删除stash
git stash apply [--index] [-q|--quiet] [<stash>] # 还原代码但不删除stash
git stash branch <branchname> [<stash>]
git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet] [-u|--include-untracked] [-a|--all] [<message>]] # 添加到stash
git stash clear

----------------------------------------------------------------

Interrupted workflow

$ git checkout feature ;# you were working in "feature" branch and
$ work work work       ;# got interrupted
$ git commit -a -m "snapshot WIP"                 (1)
$ git checkout master
$ fix fix fix
$ git commit ;# commit with real log
$ git checkout feature
$ git reset --soft HEAD^ ;# go back to WIP state  (2)
$ git reset                                       (3)

1.This commit will get blown away so a throw-away log message is OK.
2.This removes the WIP commit from the commit history,
  and sets your working tree to the state just before you made that snapshot.
3.At this point the index file still has all the WIP changes you committed as snapshot WIP.
  This updates the index to show your WIP files as uncommitted.

--------------------------------------------------------------

Undo a commit and redo

$ git commit ...
$ git reset --soft HEAD^      (1)
$ edit                        (2)
$ git commit -a -c ORIG_HEAD  (3)

1.This is most often done when you remembered what you just committed is incomplete,
  or you misspelled your commit message, or both. Leaves working tree as it was before "reset".
2.Make corrections to working tree files.
3."reset" copies the old head to .git/ORIG_HEAD; redo the commit by starting with its log message.
  If you do not need to edit the message further, you can give -C option instead.

--------------------------------------------------------------

$ tree -L 1
.
|-- HEAD         # 这个git项目当前处在哪个分支里
|-- config       # 项目的配置信息，git config命令会改动它
|-- description  # 项目的描述信息
|-- hooks/       # 系统默认钩子脚本目录
|-- index        # 索引文件
|-- logs/        # 各个refs的历史信息
|-- objects/     # Git本地仓库的所有对象 (commits, trees, blobs, tags)
`-- refs/        # 标识你项目里的每个分支指向了哪个提交(commit)。

--------------------------------------------------------------

rebase

Assume the following history exists and the current branch is "topic":

          A---B---C topic
         /
    D---E---F---G master

From this point, the result of either of the following commands:

git rebase master
git rebase master topic

would be:

                  A'--B'--C' topic
                 /
    D---E---F---G master


git rebase [--onto <newbase>]	[<upstream> [<branch>]]
transplant a topic branch based on one branch to another, to pretend that you forked the topic branch from the latter branch

First let’s assume your topic is based on branch next. For example, a feature developed in topic depends on some functionality which is found in next.

    o---o---o---o---o  master
         \
          o---o---o---o---o  next
                           \
                            o---o---o  topic

We want to make topic forked from branch master; for example, because the functionality on which topic depends was merged into the more stable master branch. We want our tree to look like this:

    o---o---o---o---o  master
        |            \
        |             o'--o'--o'  topic
         \
          o---o---o---o---o  next

We can get this using the following command:

git rebase --onto master next topic

--------------------------------------------------------------

git设置

# 正常显示中文文件名
$ git config --global core.quotepath false

# 不进行LF--CRLF转换
$ git config --global core.autocrlf false

# 解决git clone时显示"Filename too long"错误
git config --global core.longpaths true

# 设置邮箱用户名和密码
$ git config --global user.email "lonet@qq.com"
$ git config --global user.name wgj

----------------------------------------------------------------

# linux内核代码下载
$ git clone git://git.kernel.org/pub/scm/git/git.git
$ git clone http://www.kernel.org/pub/scm/git/git.git

# notepad++ 代码下载
$ git clone https://github.com/notepad-plus-plus/notepad-plus-plus

# glib下载
$ git clone https://github.com/GNOME/glib.git

$ git clone https://github.com/openembedded/meta-openembedded.git
$ git clone https://github.com/openembedded/openembedded-core.git

# exfat-nofuse
git clone https://github.com/dorimanx/exfat-nofuse.git

# tr069-netcwmp
$ git clone https://github.com/netcwmp/netcwmp.git

# nodogsplash
$ git clone https://github.com/nodogsplash/nodogsplash.git

# wifidog
$ git clone https://github.com/wifidog/wifidog-gateway.git

----------------------------------------------------------------

repo操作

repo forall -c git reset --hard HEAD
repo forall -c git clean -fdx
repo forall -p -c git branch         # 打印出每个仓库的路径

repo sync -cdx  # 更新同时清理工程

repo init -u
repo sync -c --no-tags -j8
repo start branch_name --all

git push caf HEAD:refs/for/branch_name
repo upload .

--------------------------------------------------------------
